@using Protov4.DTO
@{
    ViewData["Title"] = "Producto Page";
}

@model List<ProductoDTO>
<div class="container">
    <main role="main" class="pb-3">
        <section class="row" aria-labelledby="aspnetTitle">
            <h1 id="title" style="font:bold 36px arial;">Productos</h1>
        </section>

        <div id="contenedor_Productos" class="row">
            @{
                foreach (var prod in Model)
                {
                    byte[] imagenBytes = prod.Imagen;
                    string base64 = "data:image/png;base64," + Convert.ToBase64String(imagenBytes);
                    <section id="seccard" class="col col-md-auto">
                        <div id="cardform" class="card text-white rounded-3">
                            <div class="card-body">
                                <div class="card-title">
                                    <h5>
                                        <img src="@base64" width="267" height="252">
                                    </h5>
                                    <p id="nombreProducto" class="card-text text-uppercase">@prod.Nombre_Producto</p>
                                    <p id="Precio" class="card-text ms-3">$@prod.Precio</p>
                                    <p id="IVA" class="card-text ml-3">Precios incluyen IVA</p>
                                    <div id="botoncompra">
                                        <form class="carritoForm" action="@Url.Action("CrearCarrito", "Producto")" method="post">
                                            <input type="hidden" name="id_pedido" value="3" />
                                            <input type="hidden" name="id_producto" value="@prod.Id" />
                                            <input type="hidden" name="precio" value="@prod.Precio" />
                                            <input type="hidden" name="cantidad" value="1" />
                                            <input type="hidden" name="subtotal" value="@prod.Precio" />
                                            <button id="botoncarrito" type="submit" class="btn btn-large shadow-sm">
                                                <i id="carrito" class="bi bi-cart-fill">AÑADIR AL CARRITO</i>
                                            </button>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </section>
                }
            }
        </div>
    </main>
</div>
<div id="alertContainer" class="alert-container"></div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var carritoForm = document.querySelectorAll(".carritoForm");
        carritoForm.forEach(function (form) {
            form.addEventListener("submit", function (e) {
                e.preventDefault();

                var formData = new FormData(form);

                fetch(form.action, {
                    method: "POST",
                    body: formData
                })
                    .then(function (response) {
                        if (response.ok) {
                            // Instead of location.reload(), you can update the view using AJAX
                            updateView();
                        } else {
                            // Handle error if needed
                        }
                    })
                    .catch(function (error) {
                        // Handle network errors or other issues
                    });
            });
        });
        
        // Function to update the view (you can customize this based on your framework)
        function updateView() {
            var alertContainer = document.getElementById('alertContainer');

            // Crear el elemento de la alerta
            var alertElement = document.createElement('div');
            alertElement.classList.add('alert', 'alert-success', 'fade', 'show', 'product-alert');
            alertElement.innerHTML = 'Producto añadido al carrito';

            // Agregar la alerta al contenedor
            alertContainer.appendChild(alertElement);

            // Desvanecer la alerta después de un tiempo (por ejemplo, 3 segundos)
            setTimeout(function () {
                alertElement.classList.remove('show');

                // Eliminar la alerta del DOM después de la animación de desvanecimiento
                alertElement.addEventListener('transitionend', function () {
                    alertContainer.removeChild(alertElement);
                });
            }, 3000); // 3000 milisegundos = 3 segundos
        }

    });
</script>

